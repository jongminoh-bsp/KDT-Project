name: 🤖 Q Auto Analysis & Deploy

on:
  push:
    branches: [ develop ]
    paths:
      - 'infra/**'
      - 'infra/requirements/**'

env:
  AWS_REGION: 'ap-northeast-2'

jobs:
  q-analysis-deploy:
    name: 🧠 Q Analysis & Auto Deploy
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 2  # 이전 커밋과 비교하기 위해
        
    - name: 🔐 Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: ⚙️ Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: '1.9.8'
        
    - name: 📋 Get Changed Files
      id: changes
      run: |
        echo "changed_files<<EOF" >> $GITHUB_OUTPUT
        git diff --name-only HEAD~1 HEAD -- infra/ >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
        echo "commit_message<<EOF" >> $GITHUB_OUTPUT
        git log -1 --pretty=%B >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
    - name: 🧠 Q Analysis & Deploy
      run: |
        echo "🤖 Q가 코드 변경사항을 분석하고 배포를 시작합니다..."
        echo "📋 변경된 파일들: ${{ steps.changes.outputs.changed_files }}"
        echo "💬 커밋 메시지: ${{ steps.changes.outputs.commit_message }}"
        
        # 미사용 리소스 스캔 체크
        if echo "${{ steps.changes.outputs.commit_message }}" | grep -q "미사용 리소스 스캔"; then
          echo "🔍 미사용 리소스 스캔 실행!"
          
          # AWS 리소스 조회
          echo "📊 EC2 조회 중..."
          RUNNING_INSTANCES=$(aws ec2 describe-instances --region ap-northeast-2 --query 'Reservations[*].Instances[?State.Name==`running`]' --output json | jq length)
          STOPPED_INSTANCES=$(aws ec2 describe-instances --region ap-northeast-2 --query 'Reservations[*].Instances[?State.Name==`stopped`]' --output json | jq length)
          
          echo "💾 EBS 조회 중..."
          UNATTACHED_VOLUMES=$(aws ec2 describe-volumes --region ap-northeast-2 --query 'Volumes[?State==`available`]' --output json | jq length)
          
          echo "🔒 보안 그룹 조회 중..."
          TOTAL_SECURITY_GROUPS=$(aws ec2 describe-security-groups --region ap-northeast-2 --query 'SecurityGroups' --output json | jq length)
          
          # 비용 계산
          COST_SAVINGS=$(($UNATTACHED_VOLUMES * 8 + $STOPPED_INSTANCES * 20))
          
          echo "📊 분석 결과:"
          echo "- 실행 중 EC2: $RUNNING_INSTANCES개"
          echo "- 중지된 EC2: $STOPPED_INSTANCES개" 
          echo "- 미사용 EBS: $UNATTACHED_VOLUMES개"
          echo "- 보안 그룹: $TOTAL_SECURITY_GROUPS개"
          echo "- 예상 절약: \$$COST_SAVINGS/월"
          
          # Slack 메시지 파일 생성
          echo "📊 AWS 리소스 현황 분석" > slack_message.txt
          echo "" >> slack_message.txt
          echo "🖥️ EC2 인스턴스" >> slack_message.txt
          echo "- 실행 중: ${RUNNING_INSTANCES}개" >> slack_message.txt
          echo "- 중지됨: ${STOPPED_INSTANCES}개" >> slack_message.txt
          echo "" >> slack_message.txt
          echo "💾 EBS 볼륨" >> slack_message.txt
          echo "- 미사용: ${UNATTACHED_VOLUMES}개" >> slack_message.txt
          echo "" >> slack_message.txt
          echo "🔒 보안 그룹: ${TOTAL_SECURITY_GROUPS}개" >> slack_message.txt
          echo "" >> slack_message.txt
          echo "💰 최적화 제안" >> slack_message.txt
          echo "- 중지된 EC2 정리: 월 \$$(($STOPPED_INSTANCES * 20)) 절약" >> slack_message.txt
          echo "- 미사용 EBS 삭제: 월 \$$(($UNATTACHED_VOLUMES * 8)) 절약" >> slack_message.txt
          echo "" >> slack_message.txt
          echo "📈 총 예상 절약: \$${COST_SAVINGS}/월" >> slack_message.txt
          
          echo "✅ slack_message.txt 파일 생성 완료"
          ls -la slack_message.txt
          cat slack_message.txt
          
          exit 0
        fi
        
        # 일반 배포 로직
        echo "🚀 일반 Terraform 배포 실행..."
        cd infra/dev/terraform
        terraform init
        terraform plan -out=tfplan
        terraform apply -auto-approve tfplan
        
    - name: 📊 Generate Q Analysis Report
      if: ${{ !contains(github.event.head_commit.message, '미사용 리소스 스캔') }}
      run: |
        cd infra/dev/terraform
        
        echo "# 🤖 Q 자동 분석 및 배포 리포트" > q-analysis-report.md
        echo "" >> q-analysis-report.md
        echo "**분석 시간**: $(date -u)" >> q-analysis-report.md
        echo "**트리거**: Git Push (develop)" >> q-analysis-report.md
        echo "**분석자**: Amazon Q" >> q-analysis-report.md
        echo "" >> q-analysis-report.md
        
        echo "## 📋 변경사항 분석" >> q-analysis-report.md
        echo "\`\`\`" >> q-analysis-report.md
        echo "${{ steps.changes.outputs.changed_files }}" >> q-analysis-report.md
        echo "\`\`\`" >> q-analysis-report.md
        echo "" >> q-analysis-report.md
        
        echo "## 💬 커밋 메시지" >> q-analysis-report.md
        echo "\`\`\`" >> q-analysis-report.md
        echo "${{ steps.changes.outputs.commit_message }}" >> q-analysis-report.md
        echo "\`\`\`" >> q-analysis-report.md
        echo "" >> q-analysis-report.md
        
        echo "## 🏗️ 배포된 리소스" >> q-analysis-report.md
        terraform show -json | jq -r '.values.root_module.resources[] | "- \(.type): \(.name)"' >> q-analysis-report.md || echo "- 리소스 목록 생성 실패" >> q-analysis-report.md
        
    - name: 🔍 Send Optimization Report to Slack
      if: ${{ contains(github.event.head_commit.message, '미사용 리소스 스캔') }}
      run: |
        if [ -f slack_message.txt ]; then
          echo "✅ 파일 존재 - Slack 전송 중..."
          SLACK_MESSAGE=$(cat slack_message.txt | jq -Rs .)
          
          curl -X POST -H 'Content-type: application/json' \
            --data "{
              \"channel\": \"#optimization\",
              \"username\": \"Amazon Q\",
              \"icon_emoji\": \":mag:\",
              \"text\": \"🔍 AWS 리소스 최적화 분석 완료\",
              \"attachments\": [{
                \"color\": \"#ff9500\",
                \"title\": \"📊 상세 분석 결과\",
                \"text\": ${SLACK_MESSAGE}
              }]
            }" \
            "${{ secrets.SLACK_WEBHOOK_URL }}"
          echo "✅ Slack 전송 완료"
        else
          echo "❌ slack_message.txt 파일 없음"
          curl -X POST -H 'Content-type: application/json' \
            --data '{
              "channel": "#optimization",
              "username": "Amazon Q",
              "icon_emoji": ":warning:",
              "text": "⚠️ 미사용 리소스 스캔 실행됨 (결과 파일 생성 실패)"
            }' \
            "${{ secrets.SLACK_WEBHOOK_URL }}"
        fi

    - name: 📢 Deploy Notification
      if: ${{ !contains(github.event.head_commit.message, '미사용 리소스 스캔') }}
      run: |
        curl -X POST -H 'Content-type: application/json' \
        --data '{
          "channel": "#infrastructure",
          "username": "Amazon Q",
          "icon_emoji": ":brain:",
          "text": "🤖 Q 자동 배포 완료",
          "attachments": [{
            "color": "good",
            "title": "🚀 인프라 배포 성공",
            "fields": [{
              "title": "💬 커밋",
              "value": "${{ github.event.head_commit.message }}",
              "short": false
            }]
          }]
        }' \
        ${{ secrets.SLACK_WEBHOOK_URL }}
          
    - name: 💾 Upload Q Analysis Report
      if: ${{ !contains(github.event.head_commit.message, '미사용 리소스 스캔') }}
      uses: actions/upload-artifact@v4
      with:
        name: q-analysis-report
        path: infra/dev/terraform/q-analysis-report.md
        retention-days: 30
