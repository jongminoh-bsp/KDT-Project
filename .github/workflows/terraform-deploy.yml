name: Terraform Infrastructure Deploy

on:
  pull_request:
    branches: [main]
    paths: ['test/skyline-infrastructure/**']
    types: [opened, synchronize, reopened]
  
  push:
    branches: [main]
    paths: ['test/skyline-infrastructure/**']

env:
  TF_VAR_aws_region: ap-northeast-2
  TF_VAR_project_name: skyline
  TF_VAR_environment: dev

jobs:
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2

    - name: Terraform Init
      run: |
        cd test/skyline-infrastructure
        terraform init

    - name: Terraform Plan
      id: plan
      run: |
        cd test/skyline-infrastructure
        terraform plan -no-color -out=tfplan
      continue-on-error: true

    - name: Comment PR with Plan
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const { execSync } = require('child_process');
          
          // Get plan output
          const planOutput = execSync('cd test/skyline-infrastructure && terraform show -no-color tfplan', { encoding: 'utf8' });
          
          const comment = `## 🏗️ Terraform Plan Results
          
          ### 📊 Plan Summary
          \`\`\`
          ${planOutput.slice(0, 2000)}${planOutput.length > 2000 ? '\n... (truncated)' : ''}
          \`\`\`
          
          ### 🔍 Review Checklist
          - [ ] 리소스 생성/변경 내용 확인
          - [ ] 비용 영향도 검토
          - [ ] 보안 설정 검증
          - [ ] 태그 정책 준수 확인
          
          ### 💰 예상 비용
          - EKS 클러스터: ~$73/월
          - EC2 노드 (t3.medium × 2): ~$60/월  
          - RDS (db.t3.micro): ~$15/월
          - NAT Gateway: ~$45/월
          - **총 예상: ~$193/월**
          
          ---
          
          **✅ 승인 후 자동 배포됩니다.**`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2

    - name: Terraform Init
      run: |
        cd test/skyline-infrastructure
        terraform init

    - name: Terraform Apply
      run: |
        cd test/skyline-infrastructure
        terraform apply -auto-approve

    - name: Get Terraform Outputs
      id: outputs
      run: |
        cd test/skyline-infrastructure
        echo "vpc_id=$(terraform output -raw vpc_id)" >> $GITHUB_OUTPUT
        echo "eks_cluster_name=$(terraform output -raw eks_cluster_name)" >> $GITHUB_OUTPUT
        echo "rds_endpoint=$(terraform output -raw rds_endpoint)" >> $GITHUB_OUTPUT
        echo "ecr_url=$(terraform output -raw ecr_repository_url)" >> $GITHUB_OUTPUT

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region ap-northeast-2 --name ${{ steps.outputs.outputs.eks_cluster_name }}

    - name: Verify EKS cluster
      run: |
        kubectl get nodes
        kubectl get namespaces

    - name: Create deployment summary
      run: |
        echo "## 🚀 Infrastructure Deployment Complete!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📊 Deployed Resources" >> $GITHUB_STEP_SUMMARY
        echo "- **VPC ID**: ${{ steps.outputs.outputs.vpc_id }}" >> $GITHUB_STEP_SUMMARY
        echo "- **EKS Cluster**: ${{ steps.outputs.outputs.eks_cluster_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **RDS Endpoint**: ${{ steps.outputs.outputs.rds_endpoint }}" >> $GITHUB_STEP_SUMMARY
        echo "- **ECR Repository**: ${{ steps.outputs.outputs.ecr_url }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🎯 Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "1. Deploy Kubernetes manifests" >> $GITHUB_STEP_SUMMARY
        echo "2. Build and push Docker image to ECR" >> $GITHUB_STEP_SUMMARY
        echo "3. Configure application secrets" >> $GITHUB_STEP_SUMMARY
        echo "4. Run health checks" >> $GITHUB_STEP_SUMMARY
